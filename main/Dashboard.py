
import streamlit as st
from streamlit_card import card
from st_pages import add_page_title, get_nav_from_toml
import pandas as pd
import weatherapi
import folium
from streamlit_folium import st_folium
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import calendar
st.set_page_config(layout='wide')
configuration = weatherapi.Configuration()
configuration.api_key['key'] = '8ea05ab20b3e4e4896694251250502'
api_instance = weatherapi.APIsApi(weatherapi.ApiClient(configuration))
st.markdown('# Dashboard')
st.text('')
st.logo(image="""<svg id="e8Q4qfY0rtj1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 3300 675" shape-rendering="geometricPrecision" text-rendering="geometricPrecision" project-id="367bdef0eae947459de4febdd130057f" export-id="01817a86147d4ac9a563fa762f7ec3a5" cached="false"><text dx="0" dy="0" font-family="&quot;e8Q4qfY0rtj1:::Roboto Slab&quot;" font-size="600" font-weight="700" transform="translate(80.479961 630.157812)" fill="#fff" stroke-width="0"><tspan y="0" font-weight="700" stroke-width="0"><![CDATA[
Smart
]]></tspan></text><text dx="0" dy="0" font-family="&quot;e8Q4qfY0rtj1:::Roboto&quot;" font-size="75" font-weight="400" transform="translate(1195.17371 716.083114)" stroke-width="0"><tspan y="0" font-weight="400" stroke-width="0"><![CDATA[
 
]]></tspan></text><text dx="0" dy="0" font-family="&quot;e8Q4qfY0rtj1:::Roboto Slab&quot;" font-size="600" font-weight="400" transform="translate(1827.920064 630)" fill="#fff" stroke-width="0"><tspan y="0" font-weight="400" stroke-width="0"><![CDATA[
Arch
]]></tspan></text>
<style><![CDATA[
@font-face {font-family: 'e8Q4qfY0rtj1:::Roboto';font-style: normal;font-weight: 400;font-stretch: normal;src: url(data:font/ttf;charset=utf-8;base64,) format('truetype');}@font-face {font-family: 'e8Q4qfY0rtj1:::Roboto Slab';font-style: normal;font-weight: 400;src: url(data:font/ttf;charset=utf-8;base64,AAEAAAAQAQAABAAAR0RFRgARAAkAAAEcAAAAFkdQT1MtxyVmAAADPAAAAQxHU1VCuPy46gAAAbAAAAAoT1MvMnQ7gp4AAAJoAAAAYFNUQVR5nWzdAAACAAAAAC5jbWFwAbgCbAAAAsgAAAB0Z2FzcAAAABAAAAEUAAAACGdseWaQwJi2AAAGnAAAA6JoZWFkIGVvCAAAAjAAAAA2aGhlYRDdAjcAAAGMAAAAJGhtdHgsYQKVAAAB2AAAAChsb2NhBd8FHAAAATQAAAAWbWF4cAAqAPMAAAFMAAAAIG5hbWUy0lRTAAAESAAAAlRwb3N0/20AZAAAAWwAAAAgcHJlcGgGjIUAAAEMAAAAB7gB/4WwBI0AAAEAAf//AA8AAQAAAAwAAAAAAAAAAgABAAEACAABAAAAAAAjAE0AlQDZAQ8BPQGEAasB0QHRAAAAAQAAAAoAkgAWAF8ABQABAAAAAAAAAAAAAAAAAAQAAQADAAAAAAAA/2oAZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAhi/dUAAAnv/p36aAnbAAEAAAAAAAAAAAAAAAAAAAAKAAEAAAAKACYAJgACREZMVAASbGF0bgAOAAAAAAAEAAAAAP//AAAAAAQOAGQF/QBGBLYAcwRsAE8EKwBOBSMAMQe5AEoDVgBIAtoAGAH9AAAAAQABAAgAAQAAABQAAQAAABwAAndnaHQBBQAAAAIAAwAAAAIBCQGQAAACvAAAAAAAAQAAAAIAg9pP841fDzz1AAMIAAAAAADXh71ZAAAAAOFNZfr+nf3VCdsIYgAAAAYAAgAAAAAAAAAEBNgBkAAFAAAFMwTNAAAAmgUzBM0AAALNAGQCiQAAAAAAAAAAAAAAAAAAAP8AAABbAAAAIAAAAABHT09HAMAAIAB0CGL91QAACGICaiAAAZ8AAAAABDoFsAAAACAAAwAAAAIAAAADAAAAFAADAAEAAAAUAAQAYAAAABQAEAADAAQAIABBAFMAYQBjAGgAbQByAHT//wAAACAAQQBTAGEAYwBoAG0AcgB0////6f/A/6//ov+h/53/mf+V/5QAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAKACQAMgACREZMVAAObGF0bgAOAAQAAAAA//8AAQAAAAFrZXJuAAgAAAABAAAAAQAEAAIACAACAJIACgACAFYABAAAAHgAZgAFAAcAAP/iAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/9gAAAAAAAAAAAAAAAAAoAAAAAAAUAAAAAAAA/+0AAAAAAAAAAP/sAAEABgABAAMABAAFAAYABwABAAEABgADAAUABAABAAYAAgABAAMABQABAAMAAgACAAQAAQAWAAQAAAAGAD4AOAAyADIALAAmAAEABgABAAMABQAGAAcACAABAAYAAAABAAgAIAABAAj/2AABAAgAAAABAAj/lQAAAAoAfgADAAEECQAAALQBIgADAAEECQABABYBDAADAAEECQACAA4A/gADAAEECQADADoAxAADAAEECQAEACYAngADAAEECQAFABoAhAADAAEECQAGACQAYAADAAEECQAOAFQADAADAAEECQEFAAwAAAADAAEECQEJAA4A/gBXAGUAaQBnAGgAdABoAHQAdABwADoALwAvAHcAdwB3AC4AYQBwAGEAYwBoAGUALgBvAHIAZwAvAGwAaQBjAGUAbgBzAGUAcwAvAEwASQBDAEUATgBTAEUALQAyAC4AMABSAG8AYgBvAHQAbwBTAGwAYQBiAC0AUgBlAGcAdQBsAGEAcgBWAGUAcgBzAGkAbwBuACAAMgAuADAAMAAyAFIAbwBiAG8AdABvACAAUwBsAGEAYgAgAFIAZQBnAHUAbABhAHIAMgAuADAAMAAyADsARwBPAE8ARwA7AFIAbwBiAG8AdABvAFMAbABhAGIALQBSAGUAZwB1AGwAYQByAFIAZQBnAHUAbABhAHIAUgBvAGIAbwB0AG8AIABTAGwAYQBiAEMAbwBwAHkAcgBpAGcAaAB0ACAAMgAwADEAOAAgAFQAaABlACAAUgBvAGIAbwB0AG8AIABTAGwAYQBiACAAUAByAG8AagBlAGMAdAAgAEEAdQB0AGgAbwByAHMAIAAoAGgAdAB0AHAAcwA6AC8ALwBnAGkAdABoAHUAYgAuAGMAbwBtAC8AZwBvAG8AZwBsAGUAZgBvAG4AdABzAC8AcgBvAGIAbwB0AG8AcwBsAGEAYgApAAQAZAAAA6oFsAADAAcACwAPAAAzESERJTMBIxEzASMTIREhZANG/M48AuI8PP0ePCIC2v0mBbD6UBQFiPp4BYj6mgVEAAACAEYAAAW3BbAADwAVAAAzNTcBMwEXFSE1NwMhAxcVEyEDJyMHRmwB/akB9Gv+Xm5g/bljbjIBztYMBgx+DwUj+t0Pfn4TAQz+9BN+AkICUCEhAAABAHP/6wRcBcUAMAAABSImJxEzFxYWMzI2NjU0JiYnLgI1NDY2MzIWFxEjJyYmIyIGBhUUFhYXFhYVFAYGAl6F9nCZIUGYWGSLSkCTf5bPa3nYkJnrTJkhLYZjVIBIQZN75u1+5RVOUQE35SgsPWxIQ2ZNHSN1p2xytGhdQv7d0CQwO2pIP15HHznfpHW1ZgACAE//6wQdBE4AIwAuAAAFIiY1NDYzMzU0JiMiBgcHIzU2NjMyFhURFBYXFxUhJiYnBgYnMjY3NSMiBhUUFgGoqbD84MF3bERkKRWYScJ2xeABAmn+5QkKAjmrRGKiI8iIiFgVpZaau2pibCEdl/g7Pbyv/fcVKBQLfixGI0lhpV5CxIJQR0sAAQBO/+sD3AROACMAAAUiJiY1NTQ2NjMyFhcTIycmJiMiBgYVFRQWFjMyNjczFw4CAjOT2nh02peDxUMFmiIiZkVYhUpFgVlkhA+xAgVkuRWJ9KAqmvSOVkv+/L0jKmiuayp2rl9uYAZdomMAAQAxAAAE5wYYAB0AADM1NxEnNSERNjYzMhYVERcVITU3ETQmIyIGBxEXFTGjowFoOKJjrsCj/fWjc3JRhSujfhwE4xx//ZJOVtDY/fQcfn4cAg6GgE1C/XscfgABAEoAAAdxBE4AMAAAMzU3ESc1IRc2NjMyFhc2NjMyFhURFxUhNTcRNCYjIgYHERcVITU3ETQmIyIGBxEXFUqjowFUDTSkbGybJzOocKbAo/30o25sZ30Ko/31o3FrWnQfo34cAwUcf41NVGRkXGzj5P4THH5+HAHvoIWRbv3rHH5+HAHvmI1KQ/15HH4AAQBIAAADKAROABYAADM1NxEnNSEXFzY2MzIWFwcnJgYHERcVSKOjAVMRAi6HVx9BDhqJTmodo34cAwUcf4oTU14LBbcIBVFE/ZscfgAAAQAY/+8CpgU/ABcAAAUiJjURIzUzETMRMxUjERQWMzI2NxcGBgHIeI2rq8Xr6z40I1YYGyt9EY2bApGSAQX++5L9b05KDQWBDRQAAAA=) format('truetype');}@font-face {font-family: 'e8Q4qfY0rtj1:::Roboto Slab';font-style: normal;font-weight: 700;src: url(data:font/ttf;charset=utf-8;base64,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) format('truetype');}
]]></style>
</svg>""", size='large', icon_image="""<svg id="eqVxjy7Ez4J1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 675 675" shape-rendering="geometricPrecision" text-rendering="geometricPrecision" project-id="367bdef0eae947459de4febdd130057f" export-id="b4e46f150f214a6ca5856fffa4fa5889" cached="false"><defs><filter id="eqVxjy7Ez4J4-filter" x="-150%" y="-150%" width="400%" height="400%"><feComponentTransfer id="eqVxjy7Ez4J4-filter-brightness-0" result="result"><feFuncR id="eqVxjy7Ez4J4-filter-brightness-0-R" type="linear" slope="10"/><feFuncG id="eqVxjy7Ez4J4-filter-brightness-0-G" type="linear" slope="10"/><feFuncB id="eqVxjy7Ez4J4-filter-brightness-0-B" type="linear" slope="10"/></feComponentTransfer><feColorMatrix id="eqVxjy7Ez4J4-filter-grayscale-0" type="matrix" values="0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0" result="result"/></filter></defs><text dx="0" dy="0" font-family="&quot;eqVxjy7Ez4J1:::Roboto&quot;" font-size="33.75" font-weight="400" transform="translate(238.028971 336.62739)" stroke-width="0"><tspan y="0" font-weight="400" stroke-width="0"><![CDATA[
 
]]></tspan></text><g transform="matrix(9.076013 0 0 9.076024-116.300632-116.301182)" filter="url(#eqVxjy7Ez4J4-filter)"><circle r="30.09" transform="translate(50 50)" fill="none" stroke="#5483cc" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"/><ellipse rx="16.46" ry="30.09" transform="translate(50 50)" fill="none" stroke="#5483cc" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"/><path d="M71.09,71.46C64.946628,67.054701,57.559204,64.72183,50,64.8c-7.559204-.07817-14.946628,2.254701-21.09,6.66" fill="none" stroke="#5483cc" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"/><path d="M71.09,28.54C64.946628,32.945299,57.559204,35.27817,50,35.2c-7.559204.07817-14.946628-2.254701-21.09-6.66" fill="none" stroke="#5483cc" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"/><line x1="19.91" y1="50" x2="80.09" y2="50" fill="none" stroke="#5483cc" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"/><line x1="50" y1="19.91" x2="50" y2="80.09" fill="none" stroke="#5483cc" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"/></g><path d="" fill="none" stroke="#3f5787" stroke-width="1.35"/>
<style><![CDATA[
@font-face {font-family: 'eqVxjy7Ez4J1:::Roboto';font-style: normal;font-weight: 400;font-stretch: normal;src: url(data:font/ttf;charset=utf-8;base64,) format('truetype');}
]]></style>
</svg>""")
# Initialize session state variables if they don't exist
if 'saved_locations' not in st.session_state:
    st.session_state.saved_locations = []
if 'material_recommendations' not in st.session_state:
    st.session_state.material_recommendations = {
        'hot_humid': ['Breathable facades', 'Reflective coatings', 'Moisture-resistant materials'],
        'cold': ['High insulation materials', 'Thermal break systems', 'Frost-resistant concrete'],
        'temperate': ['Hybrid systems', 'Balanced insulation', 'Light/shade adaptable facades'],
        'arid': ['Thermal mass materials', 'Heat-resistant cladding', 'Sandstorm-resistant surfaces']
    }

# Initialize data structures
delta_data = {'Temperature': 0, 'Humidity': 0, 'Pressure': 0}
map_data = pd.DataFrame(columns=['lat', 'lon'])

# Mock data for solar analysis
def generate_solar_radiation_data(latitude):
    # Simulated solar radiation data based on latitude
    equator_distance = abs(latitude)
    months = list(calendar.month_abbr)[1:]
    base_radiation = 1000 - (equator_distance * 10)
    
    radiation_values = []
    for i, month in enumerate(months):
        # Northern hemisphere: peak in June, Southern: peak in December
        month_factor = abs(((i + 6) % 12) - 6) / 6
        if latitude > 0:  # Northern hemisphere
            seasonal_adjustment = base_radiation * (1 - month_factor * 0.7)
        else:  # Southern hemisphere
            seasonal_adjustment = base_radiation * (0.3 + month_factor * 0.7)
        
        # Add some randomness
        seasonal_adjustment *= (0.9 + np.random.random() * 0.2)
        radiation_values.append(max(100, min(1200, seasonal_adjustment)))
    
    return pd.DataFrame({
        'Month': months,
        'Solar Radiation (W/m²)': radiation_values
    })

# Generate wind rose data
def generate_wind_rose_data():
    directions = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW']
    wind_speed = np.random.randint(5, 25, size=len(directions))
    frequency = np.random.randint(5, 20, size=len(directions))
    return pd.DataFrame({
        'Direction': directions,
        'Wind Speed (km/h)': wind_speed,
        'Frequency (%)': frequency
    })

# Generate terrain analysis data
def generate_terrain_data():
    terrain_types = ['Flat', 'Sloped', 'Rocky', 'Soil', 'Clay', 'Sandy']
    percentages = np.random.randint(5, 30, size=len(terrain_types))
    # Normalize to sum to 100
    percentages = (percentages / percentages.sum() * 100).astype(int)
    # Make sure they sum to 100
    percentages[-1] += 100 - percentages.sum()
    
    return pd.DataFrame({
        'Terrain Type': terrain_types,
        'Percentage': percentages
    })

# Function to determine climate zone
def determine_climate_zone(temp, humidity):
    if temp > 25:
        return "hot_humid" if humidity > 60 else "arid"
    elif temp < 10:
        return "cold"
    else:
        return "temperate"

# Layout with tabs for better organization
tab1, tab2, tab3, tab4 = st.tabs(["Weather & Location", "Site Analysis", "Climate Insights", "Saved Projects"])

with tab1:
    col01, col02 = st.columns(2, gap='large')
    
    with col02:
        weather_placeholder = st.container()
    
    with col01:
        location_selector = st.container()
        st.text('')
        with location_selector:
            st.markdown('### LOCATION')
            st.text('')
            col11, col12 = st.columns(2)
            latitude = col11.text_input(label='Latitude', placeholder='In decimal degrees', key='latitude')
            longitude = col12.text_input(label='Longitude', placeholder='In decimal degrees', key='longitude')
            
            # Add location search by name
            location_name = st.text_input("Or search by location name", placeholder="e.g. New York, Tokyo, etc.")
            if st.button("Search Location"):
                if location_name:
                    try:
                        # Use Weather API to get coordinates from location name
                        search_response = api_instance.search_autocomplete_weather(q=location_name)
                        if search_response and len(search_response) > 0:
                            # Get first result
                            result = search_response[0]
                            latitude = result['lat']
                            longitude = result['lon']
                            # Update the text inputs
                            st.session_state.latitude = str(latitude)
                            st.session_state.longitude = str(longitude)
                            st.experimental_rerun()
                    except Exception as e:
                        st.error(f"Error searching location: {e}")
    
    st.markdown('### MAP VIEW')
    map_render = st.empty()
    st.text('')
    with map_render:
        m = folium.Map(location=[0, 0], zoom_control=True, zoom_start=5)
        map = st_folium(m, height=500, use_container_width=True)
    
    if not latitude or not longitude:
        with location_selector:
            st.text('')
            st.text('')
            st.text('')
            st.text('')
            col31, col32, col33 = st.columns(3)
            with col31:
                st.markdown('###### Name')
                st.markdown(f'#### --')
            with col32:
                st.markdown('###### Region')
                st.markdown(f'#### --')
            with col33:
                st.markdown('###### Country')
                st.markdown(f'#### --')
            st.text('')
            st.text('')
        with weather_placeholder:
            st.markdown('### WEATHER METRICS')
            st.text('')
            col21, col22, col23 = st.columns(3, gap='small')
            col41, col42, col43 = st.columns(3, gap='large')
            col51, col52, col53 = st.columns(3, gap='large')
            col21.metric('**Temperature (°C)**', value='--', delta=delta_data['Temperature'])
            col22.metric('**Humidity (%)**', value='--', delta=delta_data['Humidity'])
            col23.metric('**Pressure (mbar)**', value='--', delta=delta_data['Pressure'])
            col41.metric('**Condition**', value='--')
            col42.metric('**Wind (kph)**', value='--')
            col43.metric('**Precipitation (mm)**', '--')
            col51.metric('**Cloud Cover (%)**', value='--')
            col52.metric('**Heat Index (°C)**', value='--')
            col53.metric('**Dewpoint (°C)**', value='--')
    elif latitude and longitude:
        latitude = float(latitude)
        longitude = float(longitude)
        q = f'{latitude},{longitude}'
        new_row = pd.DataFrame({'lat': [latitude], 'lon': [longitude]})
        map_data = pd.concat([map_data, new_row], ignore_index=True)
        with map_render:
            m = folium.Map(location=[latitude, longitude])
            folium.Marker(location=[latitude, longitude], popup='Input co-ordinates').add_to(m)
            # Add a 5km radius circle for site context
            folium.Circle(
                location=[latitude, longitude],
                radius=5000,  # 5km in meters
                color='blue',
                fill=True,
                fill_opacity=0.2,
                popup='5km Radius'
            ).add_to(m)
            map = st_folium(m, height=500, use_container_width=True)
        
        with weather_placeholder:
            st.markdown('### WEATHER METRICS')
            st.text('')
            api_response = api_instance.realtime_weather(q=q)
            
            # Store current temperature and humidity for climate zone determination
            current_temp = api_response['current']['temp_c']
            current_humidity = api_response['current']['humidity']
            
            col21, col22, col23 = st.columns(3, gap='large')
            col41, col42, col43 = st.columns(3, gap='large')
            col51, col52, col53 = st.columns(3, gap='large')
            col21.metric('**Current Temperature (°C)**', value=current_temp)
            col22.metric('**Humidity (%)**', value=current_humidity)
            col23.metric('**Pressure (mbar)**', value=api_response['current']['pressure_mb'])
            col41.metric('**Condition**', value=api_response['current']['condition']['text'])
            col42.metric('**Wind (kph)**', value=api_response['current']['wind_kph'])
            col43.metric('**Precipitation (mm)**', value=api_response['current']['precip_mm'])
            col51.metric('**Cloud Cover (%)**', value=api_response['current']['cloud'])
            col52.metric('**Heat Index (°C)**', value=api_response['current']['heatindex_c'])
            col53.metric('**Dewpoint (°C)**', value=api_response['current']['dewpoint_c'])
            
            # Save button
            if st.button("Save this location to projects"):
                location_info = {
                    'name': api_response['location']['name'],
                    'lat': latitude,
                    'lon': longitude,
                    'region': api_response['location']['region'],
                    'country': api_response['location']['country'],
                    'temperature': current_temp,
                    'humidity': current_humidity,
                    'saved_at': datetime.now().strftime("%Y-%m-%d %H:%M")
                }
                st.session_state.saved_locations.append(location_info)
                st.success(f"Saved {api_response['location']['name']} to your projects!")
        
        with location_selector:
            col31, col32, col33 = st.columns(3)
            with col31:
                st.markdown('###### Name')
                st.markdown(f'#### {api_response['location']['name']}')
            with col32:
                st.markdown('###### Region')
                st.markdown(f'#### {api_response['location']['region']}')
            with col33:
                st.markdown('###### Country')
                st.markdown(f'#### {api_response['location']['country']}')

with tab2:
    st.markdown('### SITE ANALYSIS TOOLS')
    st.text('')
    
    if latitude and longitude:
        col61, col62 = st.columns(2, gap='large')
        
        # Solar Path Analysis
        with col61:
            st.markdown('#### Solar Path Analysis')
            st.write('Visualize the sun path for optimal building orientation.')
            
            # Generate and plot solar radiation data
            solar_data = generate_solar_radiation_data(latitude)
            fig_solar = px.bar(
                solar_data, 
                x='Month', 
                y='Solar Radiation (W/m²)',
                color='Solar Radiation (W/m²)',
                color_continuous_scale='Viridis',
                title=f'Annual Solar Radiation at {latitude:.2f}°, {longitude:.2f}°'
            )
            st.plotly_chart(fig_solar, use_container_width=True)
            
            # Solar optimization recommendations
            st.markdown("##### Solar Optimization Recommendations")
            if abs(latitude) < 23.5:  # Near equator
                st.info("• East-west orientation recommended to minimize sun exposure\n• Consider deep overhangs for shading\n• Maximize roof solar potential with minimal tilt")
            elif latitude > 0:  # Northern hemisphere
                st.info("• South-facing windows for passive solar gain\n• Consider seasonal sun angles for shading devices\n• Optimize roof angle at " + str(abs(int(latitude))) + "° for solar panels")
            else:  # Southern hemisphere
                st.info("• North-facing windows for passive solar gain\n• Consider seasonal sun angles for shading devices\n• Optimize roof angle at " + str(abs(int(latitude))) + "° for solar panels")
        
        # Wind Analysis
        with col62:
            st.markdown('#### Wind Direction Analysis')
            st.write('Understand prevailing wind patterns for ventilation design.')
            
            # Generate and plot wind rose
            wind_data = generate_wind_rose_data()
            fig_wind = px.bar_polar(
                wind_data, 
                r="Frequency (%)", 
                theta="Direction",
                color="Wind Speed (km/h)", 
                color_continuous_scale="Viridis",
                title=f"Wind Rose at {latitude:.2f}°, {longitude:.2f}°"
            )
            st.plotly_chart(fig_wind, use_container_width=True)
            
            # Wind optimization recommendations
            st.markdown("##### Ventilation Strategy Recommendations")
            dominant_dir = wind_data.iloc[wind_data['Frequency (%)'].argmax()]['Direction']
            st.info(f"• Dominant wind direction: {dominant_dir}\n• Position openings to maximize cross-ventilation\n• Consider wind breaks on {dominant_dir} side if winds exceed 20km/h\n• Stack ventilation recommended for interior spaces")
        
        col63, col64 = st.columns(2, gap='large')
        
        # Terrain Analysis
        with col63:
            st.markdown('#### Terrain Analysis')
            st.write('Analyze terrain characteristics for foundation planning.')
            
            terrain_data = generate_terrain_data()
            fig_terrain = px.pie(
                terrain_data,
                values='Percentage',
                names='Terrain Type',
                title=f'Terrain Composition at {latitude:.2f}°, {longitude:.2f}°',
                color_discrete_sequence=px.colors.sequential.Viridis
            )
            st.plotly_chart(fig_terrain, use_container_width=True)
            
            # Foundation recommendations
            st.markdown("##### Foundation Recommendations")
            primary_terrain = terrain_data.iloc[terrain_data['Percentage'].argmax()]['Terrain Type']
            if primary_terrain in ['Flat', 'Soil']:
                st.info("• Traditional slab foundation suitable\n• Standard footings recommended\n• Minimal site preparation required")
            elif primary_terrain in ['Sloped', 'Rocky']:
                st.info("• Consider stepped foundation or pier systems\n• Extensive site preparation recommended\n• Retaining walls may be necessary\n• Drainage systems critical")
            else:  # Clay or Sandy
                st.info("• Enhanced foundation with reinforcement recommended\n• Consider deep footings or piles\n• Soil stabilization may be necessary\n• Monitor for seasonal changes")
        
        # Historical Weather Trends
        with col64:
            st.markdown('#### Historical Weather Data')
            st.write('Analyze historical weather trends for material selection.')
            
            # Generate some mock historical data
            months = list(calendar.month_abbr)[1:]
            temp_data = np.random.normal(current_temp, 8, 12)
            temp_data = np.clip(temp_data, -20, 45)  # realistic temperature range
            rain_data = np.random.exponential(scale=5, size=12)
            
            # Create a DataFrame
            hist_data = pd.DataFrame({
                'Month': months,
                'Avg. Temperature (°C)': temp_data,
                'Precipitation (mm/month)': rain_data
            })
            
            # Plot
            fig_hist = go.Figure()
            fig_hist.add_trace(go.Bar(
                x=hist_data['Month'],
                y=hist_data['Precipitation (mm/month)'],
                name='Precipitation',
                marker_color='lightblue'
            ))
            fig_hist.add_trace(go.Scatter(
                x=hist_data['Month'],
                y=hist_data['Avg. Temperature (°C)'],
                name='Temperature',
                marker_color='red',
                mode='lines+markers'
            ))
            fig_hist.update_layout(
                title=f'Annual Weather Patterns at {latitude:.2f}°, {longitude:.2f}°',
                yaxis=dict(title='Precipitation (mm)'),
                yaxis2=dict(title='Temperature (°C)', overlaying='y', side='right')
            )
            st.plotly_chart(fig_hist, use_container_width=True)
            
            # Weather-based recommendations
            st.markdown("##### Material Recommendations")
            annual_rain = hist_data['Precipitation (mm/month)'].sum()
            max_temp = hist_data['Avg. Temperature (°C)'].max()
            min_temp = hist_data['Avg. Temperature (°C)'].min()
            
            if annual_rain > 60:
                st.info("• High water-resistance finishes recommended\n• Consider enhanced drainage systems\n• Corrosion-resistant materials for exteriors")
            if max_temp - min_temp > 25:
                st.info("• Materials with high thermal expansion tolerance needed\n• Flexible joint systems recommended\n• Consider thermal bridging solutions")
    else:
        st.info("Please input latitude and longitude to view site analysis tools.")

with tab3:
    st.markdown('### CLIMATE-RESPONSIVE DESIGN INSIGHTS')
    st.text('')
    
    if latitude and longitude:
        # Determine climate zone
        climate_zone = determine_climate_zone(current_temp, current_humidity)
        
        col71, col72 = st.columns(2, gap='large')
        
        with col71:
            st.markdown('#### Building Envelope Recommendations')
            
            # Climate-specific building envelope recommendations
            if climate_zone == 'hot_humid':
                st.markdown("""
                ##### 🌡️ Hot & Humid Climate Strategy
                * **Wall Construction**: Breathable walls with vapor barriers
                * **Roof**: Light-colored reflective materials with rainwater management
                * **Insulation**: Moderate R-value (R-15 to R-20) with vapor control
                * **Windows**: Low-E glazing with external shading devices
                * **Orientation**: Maximize cross-ventilation, minimize east/west exposure
                """)
            elif climate_zone == 'arid':
                st.markdown("""
                ##### 🏜️ Hot & Arid Climate Strategy
                * **Wall Construction**: High thermal mass walls (12+ inches)
                * **Roof**: Reflective surfaces with thermal breaks
                * **Insulation**: High R-value (R-20 to R-30)
                * **Windows**: Small openings, deeply recessed, with exterior shading
                * **Orientation**: Minimize east/west facades, create courtyard typologies
                """)
            elif climate_zone == 'cold':
                st.markdown("""
                ##### ❄️ Cold Climate Strategy
                * **Wall Construction**: Double-stud or advanced framing with continuous insulation
                * **Roof**: Steep slope with snow guards and ice-dam prevention
                * **Insulation**: Very high R-value (R-30 to R-60)
                * **Windows**: Triple-glazed with thermal breaks
                * **Orientation**: Maximize south facade (north in southern hemisphere)
                """)
            else:  # temperate
                st.markdown("""
                ##### 🍃 Temperate Climate Strategy
                * **Wall Construction**: Balanced thermal mass and insulation
                * **Roof**: Adaptable for seasonal rain and moderate temperatures
                * **Insulation**: Moderate R-value (R-20 to R-25)
                * **Windows**: Operable windows for natural ventilation with moderate shading
                * **Orientation**: Balance solar gain with ventilation
                """)
            
            # Energy efficiency chart
            st.markdown("##### Projected Energy Efficiency Impact")
            energy_metrics = ['Heating Load', 'Cooling Load', 'Lighting', 'Ventilation']
            
            if climate_zone == 'hot_humid':
                energy_values = [20, 45, 15, 20]
            elif climate_zone == 'arid':
                energy_values = [15, 50, 20, 15]
            elif climate_zone == 'cold':
                energy_values = [50, 10, 25, 15]
            else:  # temperate
                energy_values = [30, 30, 20, 20]
            
            energy_df = pd.DataFrame({
                'Category': energy_metrics,
                'Percentage': energy_values
            })
            
            fig_energy = px.pie(
                energy_df,
                values='Percentage',
                names='Category',
                title='Energy Usage Distribution',
                color_discrete_sequence=px.colors.sequential.Turbo
            )
            st.plotly_chart(fig_energy, use_container_width=True)
        
        with col72:
            st.markdown('#### Material Recommendations')
            
            # Material recommendations based on climate
            st.markdown(f"##### Recommended Materials for {api_response['location']['name']}")
            
            material_recommendations = st.session_state.material_recommendations[climate_zone]
            
            # Create expandable sections for different building components
            with st.expander("Exterior Walls", expanded=True):
                if climate_zone == 'hot_humid':
                    st.markdown("""
                    * **Primary Material**: Breathable concrete blocks with air gaps
                    * **Finish**: Light-colored, mold-resistant paint
                    * **Insulation**: Moisture-resistant foam board (XPS)
                    * **Special Consideration**: Vapor-permeable weather barrier
                    """)
                elif climate_zone == 'arid':
                    st.markdown("""
                    * **Primary Material**: Adobe, rammed earth, or thermal mass concrete
                    * **Finish**: Heat-reflective coatings
                    * **Insulation**: Exterior rigid insulation
                    * **Special Consideration**: Thermal breaks and expansion joints
                    """)
                elif climate_zone == 'cold':
                    st.markdown("""
                    * **Primary Material**: Structural insulated panels (SIPs)
                    * **Finish**: Durable siding with drainage plane
                    * **Insulation**: Continuous exterior rigid insulation
                    * **Special Consideration**: Thermal bridging prevention details
                    """)
                else:  # temperate
                    st.markdown("""
                    * **Primary Material**: Wood frame with continuous insulation
                    * **Finish**: Fiber cement or wood siding
                    * **Insulation**: Mineral wool batts
                    * **Special Consideration**: Weather-responsive breathable assembly
                    """)
            
            with st.expander("Roofing", expanded=True):
                if climate_zone == 'hot_humid':
                    st.markdown("""
                    * **Primary Material**: Standing seam metal with raised battens
                    * **Finish**: High-albedo coating
                    * **Insulation**: Ventilated air space with radiant barrier
                    * **Special Consideration**: Enhanced gutter and drainage systems
                    """)
                elif climate_zone == 'arid':
                    st.markdown("""
                    * **Primary Material**: Concrete or clay tile
                    * **Finish**: Light-colored reflective coatings
                    * **Insulation**: Above-deck rigid insulation
                    * **Special Consideration**: Dust-resistant sealing
                    """)
                elif climate_zone == 'cold':
                    st.markdown("""
                    * **Primary Material**: Asphalt shingles or metal roofing
                    * **Finish**: Dark colors to aid snow melt
                    * **Insulation**: High-performance attic system (R-50+)
                    * **Special Consideration**: Ice dam prevention detailing
                    """)
                else:  # temperate
                    st.markdown("""
                    * **Primary Material**: Composite shingles or metal panels
                    * **Finish**: Mid-tone colors
                    * **Insulation**: Moderate attic insulation with ventilation
                    * **Special Consideration**: Flexible for seasonal conditions
                    """)
            
            with st.expander("Windows & Glazing", expanded=True):
                if climate_zone == 'hot_humid':
                    st.markdown("""
                    * **Frame Material**: Fiberglass or vinyl
                    * **Glazing**: Double-glazed, low-E, SHGC < 0.25
                    * **Features**: Operable with insect screens
                    * **Special Consideration**: Deep overhangs or exterior shading
                    """)
                elif climate_zone == 'arid':
                    st.markdown("""
                    * **Frame Material**: Thermally broken aluminum or fiberglass
                    * **Glazing**: Double-glazed, low-E, SHGC < 0.20
                    * **Features**: Limited size, strategically placed
                    * **Special Consideration**: Exterior shading essential
                    """)
                elif climate_zone == 'cold':
                    st.markdown("""
                    * **Frame Material**: Fiberglass or wood with exterior cladding
                    * **Glazing**: Triple-glazed, low-E, SHGC > 0.40
                    * **Features**: Tight air sealing
                    * **Special Consideration**: Thermal breaks in frames
                    """)
                else:  # temperate
                    st.markdown("""
                    * **Frame Material**: Wood, fiberglass, or vinyl
                    * **Glazing**: Double-glazed, low-E, SHGC 0.30-0.40
                    * **Features**: Operable for natural ventilation
                    * **Special Consideration**: Seasonal shading devices
                    """)
            
            # Material performance comparison
            st.markdown("##### Material Performance Comparison")
            
            # Create material comparison data
            material_types = ['Standard Practice', 'Climate-Optimized', 'High Performance']
            
            if climate_zone == 'hot_humid':
                energy_savings = [0, 30, 45]
                durability = [5, 8, 9]
                cost_premium = [0, 15, 35]
            elif climate_zone == 'arid':
                energy_savings = [0, 35, 50]
                durability = [4, 8, 10]
                cost_premium = [0, 20, 40]
            elif climate_zone == 'cold':
                energy_savings = [0, 40, 55]
                durability = [6, 8, 9]
                cost_premium = [0, 25, 45]
            else:  # temperate
                energy_savings = [0, 25, 40]
                durability = [7, 8, 9]
                cost_premium = [0, 10, 30]
            
            # Create radar chart
            fig = go.Figure()
            
            fig.add_trace(go.Scatterpolar(
                r=[energy_savings[0], durability[0], 100-cost_premium[0]],
                theta=['Energy Efficiency', 'Durability', 'Cost Efficiency'],
                fill='toself',
                name='Standard Practice'
            ))
            fig.add_trace(go.Scatterpolar(
                r=[energy_savings[1], durability[1], 100-cost_premium[1]],
                theta=['Energy Efficiency', 'Durability', 'Cost Efficiency'],
                fill='toself',
                name='Climate-Optimized'
            ))
            fig.add_trace(go.Scatterpolar(
                r=[energy_savings[2], durability[2], 100-cost_premium[2]],
                theta=['Energy Efficiency', 'Durability', 'Cost Efficiency'],
                fill='toself',
                name='High Performance'
            ))
            
            fig.update_layout(
                polar=dict(
                    radialaxis=dict(
                        visible=True,
                        range=[0, 100]
                    )),
                showlegend=True,
                title="Material Strategy Comparison"
            )
            
            st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("Please input latitude and longitude to view climate design insights.")

with tab4:
    st.markdown("### SAVED PROJECTS")
    st.text("")
    
    if not st.session_state.saved_locations:
        st.info("You haven't saved any locations yet. Enter coordinates and click 'Save this location' to add projects here.")
    else:
        # Display saved locations in cards
        col_projects = st.columns(3, gap="large")
        
        for i, location in enumerate(st.session_state.saved_locations):
            with col_projects[i % 3]:
                project_card = st.container()
                with project_card:
                    st.markdown(f"#### {location['name']}, {location['country']}")
                    st.markdown(f"**Region:** {location['region']}")
                    st.markdown(f"**Coordinates:** {location['lat']:.4f}, {location['lon']:.4f}")
                    st.markdown(f"**Climate:** {determine_climate_zone(location['temperature'], location['humidity']).replace('_', ' ').title()}")
                    st.markdown(f"**Saved:** {location['saved_at']}")
                    
                    # Actions
                    col1, col2 = st.columns(2)
                    if col1.button(f"Load Project #{i+1}"):
                        # Set the lat/lon inputs to this saved location
                        st.session_state.latitude = str(location['lat'])
                        st.session_state.longitude = str(location['lon'])
                        st.experimental_rerun()
                    
                    if col2.button(f"Delete #{i+1}"):
                        # Remove from saved locations
                        st.session_state.saved_locations.pop(i)
                        st.experimental_rerun()
                
                st.markdown("---")
st.sidebar.markdown("### AI Design Assistant")
design_question = st.sidebar.text_area("Ask a design question related to your project:")
if design_question:
                st.sidebar.markdown("### AI Recommendations")
                
                # Mock AI response - in a real app, this would call an AI service
                if "solar" in design_question.lower() or "sun" in design_question.lower():
                    st.sidebar.info("""
                    Based on your location's solar patterns:
                    
                    1. Consider implementing south-facing (north in southern hemisphere) windows with proper overhangs to maximize winter heat gain and minimize summer heat.
                    
                    2. Roof-mounted solar panels would be most efficient at an angle equal to your latitude.
                    
                    3. For this climate zone, consider light shelves on windows to allow deeper daylight penetration while blocking direct sunlight.
                    """)
                elif "material" in design_question.lower():
                    st.sidebar.info("""
                    Based on your local climate conditions:
                    
                    1. Consider using locally-sourced materials to reduce embodied carbon and support regional economy.
                    
                    2. For this climate zone, prioritize materials with appropriate thermal mass and moisture management properties.
                    
                    3. Explore biophilic materials that connect occupants with nature while maintaining durability in your climate.
                    """)
                elif "wind" in design_question.lower() or "ventilation" in design_question.lower():
                    st.sidebar.info("""
                    For optimal natural ventilation:
                    
                    1. Orient your building with the narrow face toward prevailing winds.
                    
                    2. Implement cross-ventilation with openings on opposite sides of spaces.
                    
                    3. Consider stack effect ventilation for multi-story spaces using clerestory windows or ventilation shafts.
                    
                    4. In this climate, night-flush cooling could be effective during summer months.
                    """)
                else:
                    st.sidebar.info("""
                    For sustainable design in this location:
                    
                    1. Focus on passive design strategies first: orientation, thermal mass, insulation, and natural ventilation.
                    
                    2. Consider water management appropriate to your climate: rainwater harvesting, greywater systems, or xeriscaping.
                    
                    3. Evaluate embodied carbon alongside operational carbon in material and system selections.
                    
                    4. Design flexible spaces that can adapt to changing needs and climate conditions over time.
                    """)

    
# Add sustainability metrics
st.sidebar.markdown("---")
st.sidebar.markdown("### Sustainability Metrics")
energy_efficiency = st.sidebar.slider("Energy Efficiency Target", 0, 100, 75)
water_conservation = st.sidebar.slider("Water Conservation Target", 0, 100, 65)
carbon_footprint = st.sidebar.slider("Carbon Footprint Reduction", 0, 100, 60)

if st.sidebar.button("Calculate Sustainability Score"):
    sustainability_score = (energy_efficiency + water_conservation + carbon_footprint) / 3
    st.sidebar.metric("Overall Sustainability Score", f"{sustainability_score:.1f}/100")
    
    if sustainability_score >= 80:
        st.sidebar.success("Excellent! Your design is on track for high sustainability certification.")
    elif sustainability_score >= 60:
        st.sidebar.info("Good progress. Consider enhancing water and carbon strategies to improve your score.")
    else:
        st.sidebar.warning("Your sustainability targets need improvement. Review the climate insights for guidance.")

# Regulatory compliance checker
st.sidebar.markdown("---")
st.sidebar.markdown("### Regulatory Compliance")
building_type = st.sidebar.selectbox("Building Type", ["Residential", "Commercial", "Mixed-Use", "Institutional"])
building_height = st.sidebar.number_input("Building Height (m)", min_value=0.0, value=10.0)
total_floor_area = st.sidebar.number_input("Total Floor Area (m²)", min_value=0.0, value=500.0)

if st.sidebar.button("Check Compliance"):
    st.sidebar.info("Compliance check will connect to local building code databases in the full version.")
    
    # Placeholder for compliance recommendations
    if building_type == "Residential" and building_height > 15:
        st.sidebar.warning("Building height may exceed local residential limits. Consider height variance or mixed-use zoning.")
    
    if total_floor_area > 1000 and building_type != "Commercial":
        st.sidebar.info("Floor area may require additional egress planning and accessibility considerations.")